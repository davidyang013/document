1. git init
   it will create a folder .git includes some folders and files like below:
   hooks      
   info
   objects
   refs
   config
   description
   HEAD

2. git add .
   git commit -m "[commit message]"
   one line like git commit -am ***

3. git commit --amend
   

4. git checkout 1.txt 2.txt
   revoke the uncommit files 

5. git revert head
   revoke the last commit and generate a new commit message

6. git reset HEAD filename

   git reset --hard HEAD^
 
7. git branch
   git branch -a
   git branch branchname  create new branch based on current branch
   git checkout branchname
   git checkout -b branchname create new branch based on current branch and switch to new branch
   git branch branchname b455ffsef
   git branch branchname tagname

8. git merge branchname
   git cherry-pick b345fed
   git merge -squash branchname
   git rebase -i compress the lastest commit before push
   git branch -d(-D) branchname

9. git mergetool

10. git tag -a tagname 4effggdf "tag msg" tag for history commit
    git tag -a tagname -m "tags msg"   tag for current commit
    git tag
    git tag -d/-D tagname

11. git log --online --graph
    --online shows the information between each commit compressed into the hash value and submit information in a row.
    --graph  this option will be left in the output interface with a graphical representation based on the text to display the history
    --all shows the history of all branch
    gitk branchname
    git --all
    gitk filename
    git branch -v   check the last commit of erevry branch

12. git clone ssh://eyngwei@gerrit.sh.cn.ao.ericsson.se:29418/IPTV/*
    git pull origin branchname
    git push origin branchname
    git push origin HEAD:refs/for/branchname
    git push origin tagname


13. ssh-keygen -t rsa
    ssh -p 29418 eynwgei@gerrit.sh.cn.ao.ericsson.se
    git config -l


14. git blame [file_name]
    check the every line author, last modified timestamp and commit.

15 git reflog
    check the info that delete by hard reset, it shows the information of head move, no including the push or merge

16 git add -p file_name
   commit part of the file_name's update
   y  cache this part
   n  no cache
   e  edit 
   d exit or enter next file
   s split this block

17 git rebase -i HEAD~[number_of_commits]
   merge some times commits to one
   git rebase -i HEAD~2   

18 git stash
   git stash list
   git stash apply #want to recover or not save it 
   git stash apply stash@{2}

19 git fsck --lost-found
   check the lost commit

20 git cherry-pick [commit-hash]
    merge the commit in other branch
